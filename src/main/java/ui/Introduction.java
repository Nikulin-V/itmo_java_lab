package ui;

import classes.console.TextColor;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

public class Introduction extends JFrame {
    private JPanel MainPanel;
    private JPanel ButtonField;
    private JButton RegistrationButton;
    private JButton AuthorizationButton;
    private JLabel GreetingsDescriptionLabel;
    private JPanel IntroductionLabelsPanel;
    private JLabel ConnectionLabel;
    private boolean isRegistration = false;
    public JFrame nextWindow;
    private static String host;
    private static int port;
    public static ObjectInputStream in;
    public static ObjectOutputStream out;
    public static MainActivity mainActivityWindow;
    public static Socket socket;

    public Introduction() {
        $$$setupUI$$$();
        setContentPane(MainPanel);
        setTitle("База данных фильмов");
        setSize(700, 700);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
        while (socket == null || !socket.isConnected()) {
            AuthorizationButton.setEnabled(false);
            RegistrationButton.setEnabled(false);
            ConnectionLabel.setForeground(new Color(204, 204, 0));
            ConnectionLabel.setText("Пытаюсь установить соединение с сервером...");
            try {
                Thread.sleep(500);
            } catch (InterruptedException ignored) {
            }
            try {
                socket = new Socket(host, port);
                out = new ObjectOutputStream(socket.getOutputStream());
                in = new ObjectInputStream(socket.getInputStream());
                ConnectionLabel.setForeground(new Color(0, 80, 0));
                ConnectionLabel.setText("Соединение установлено");
                AuthorizationButton.setEnabled(true);
                RegistrationButton.setEnabled(true);
            } catch (UnknownHostException e) {
                ConnectionLabel.setText("Неизвестный хост");
            } catch (IOException e) {
                ConnectionLabel.setForeground(new Color(204, 0, 0));
                ConnectionLabel.setText(e.getMessage());
                AuthorizationButton.setEnabled(false);
                RegistrationButton.setEnabled(false);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ignored) {
                }
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println(TextColor.red("Неверное число аргументов"));
            System.out.println(TextColor.red("При запуске программы введите в аргументах имя хоста и номер порта (0-65535)"));
            System.out.println("Завершение работы...");
            Runtime.getRuntime().exit(0);
        }

        host = args[0];
        port = 14600;
        try {
            port = Integer.parseInt(args[1]);
            if (0 > port || port > 65535)
                throw new NumberFormatException();
        } catch (NumberFormatException e) {
            System.out.println(TextColor.red("Номер порта должен быть в диапазоне от 0 до 65535"));
            System.out.println("Завершение работы...");
            Runtime.getRuntime().exit(0);
        }
        Introduction mainFrame = new Introduction();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */


    private void createUIComponents() {
        RegistrationButton = new JButton();
        RegistrationButton.setActionCommand("register");
        RegistrationButton.addActionListener(this::buttonPressed);

        AuthorizationButton = new JButton();
        AuthorizationButton.setActionCommand("login");
        AuthorizationButton.addActionListener(this::buttonPressed);
    }

    private void buttonPressed(ActionEvent e) {
        this.dispose();
        if (e.getActionCommand().equals("login"))
            nextWindow = new Authorization();
        else if (e.getActionCommand().equals("register")) {
            isRegistration = true;
            nextWindow = new Registration();
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.setBackground(new Color(-1));
        ButtonField = new JPanel();
        ButtonField.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(ButtonField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RegistrationButton.setBackground(new Color(-2299922));
        RegistrationButton.setEnabled(true);
        RegistrationButton.setFocusPainted(false);
        RegistrationButton.setForeground(new Color(-16777216));
        RegistrationButton.setSelected(true);
        RegistrationButton.setText("Регистрация");
        ButtonField.add(RegistrationButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, 30), new Dimension(300, 30), new Dimension(500, 30), 0, false));
        AuthorizationButton.setBackground(new Color(-12743731));
        AuthorizationButton.setBorderPainted(false);
        AuthorizationButton.setEnabled(true);
        AuthorizationButton.setFocusPainted(false);
        AuthorizationButton.setForeground(new Color(-1));
        AuthorizationButton.setMargin(new Insets(0, 0, 0, 0));
        AuthorizationButton.setSelected(true);
        AuthorizationButton.setText("Войти");
        ButtonField.add(AuthorizationButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, 30), new Dimension(300, 30), new Dimension(500, 30), 0, false));
        final Spacer spacer1 = new Spacer();
        ButtonField.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        ButtonField.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 20), null, null, 0, false));
        IntroductionLabelsPanel = new JPanel();
        IntroductionLabelsPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        MainPanel.add(IntroductionLabelsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        GreetingsDescriptionLabel = new JLabel();
        GreetingsDescriptionLabel.setIcon(new ImageIcon(getClass().getResource("/images/introduction.jpg")));
        GreetingsDescriptionLabel.setText("");
        IntroductionLabelsPanel.add(GreetingsDescriptionLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ConnectionLabel = new JLabel();
        ConnectionLabel.setForeground(new Color(-16756736));
        ConnectionLabel.setText("Соединение установлено");
        IntroductionLabelsPanel.add(ConnectionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, 50), null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }
}
