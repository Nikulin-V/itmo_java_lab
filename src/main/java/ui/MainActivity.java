package ui;

import classes.UserCredentials;
import classes.collection.CollectionManager;
import classes.commands.Info;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import ui.locale.Lang;
import ui.locale.NumberCellRenderer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.*;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class MainActivity extends JFrame {
    private JPanel MainActivityPanel;
    private JTable collectionTable;
    private JButton clearCollectionButton;
    private JButton sortASCButton;
    private JButton sortDESCButton;
    private JButton sortButton;
    private JPanel canvasRatingPanel;
    private JButton deleteMovieButton;
    private JButton updateMovieButton;
    private JLabel selectedMovieLabel;
    private JLabel collectionLabel;
    private JPanel tablePanel;
    private JPanel collectionPanel;
    private JPanel movieInformationPanel;
    private JComboBox selectLanguageComboBox;
    private JComboBox selectSortByComboBox;
    private JScrollPane scrollPane;
    private JLabel movieInformationLabel;
    private JPanel userInformationPanel;
    public static UserCredentials credentials;
    private JTabbedPane tabbedPane1;
    private JPanel rightMenuPanel;
    private JPanel tableSettingsPanel;
    private JButton addButton;
    private JButton removeAtIndexButton;
    private JButton removeByIdButton;
    private JPanel sortPanel;
    private JLabel welcomeBackLabel;
    private JButton removeLowerButton;
    private JButton oscarsCountButton;
    private JButton goldenPalmButton;
    private JButton infoButton;
    private Lang lang;

    public MainActivity(UserCredentials credentials) {
        MainActivity.credentials = credentials;
        $$$setupUI$$$();
        setContentPane(MainActivityPanel);
        setTitle("База данных фильмов");
        setSize(1000, 1200);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
    }

    public static void main(String[] args) {
        MainActivity mainFrame = new MainActivity(new UserCredentials("anton", "anton"));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainActivityPanel = new JPanel();
        MainActivityPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainActivityPanel.setBackground(new Color(-1));
        MainActivityPanel.setForeground(new Color(-16729671));
        tabbedPane1 = new JTabbedPane();
        tabbedPane1.setBackground(new Color(-16729671));
        tabbedPane1.setFocusable(false);
        tabbedPane1.setForeground(new Color(-1));
        tabbedPane1.setRequestFocusEnabled(false);
        MainActivityPanel.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Main", panel1);
        collectionPanel = new JPanel();
        collectionPanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        collectionPanel.setBackground(new Color(-16729671));
        panel1.add(collectionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tablePanel = new JPanel();
        tablePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tablePanel.setOpaque(false);
        tablePanel.setRequestFocusEnabled(false);
        tablePanel.setVerifyInputWhenFocusTarget(false);
        collectionPanel.add(tablePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scrollPane.setBackground(new Color(-16729671));
        scrollPane.setDoubleBuffered(true);
        scrollPane.setEnabled(true);
        tablePanel.add(scrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, 1, null, null, null, 0, false));
        collectionTable.setAutoResizeMode(1);
        collectionTable.setBackground(new Color(-1));
        collectionTable.setCellSelectionEnabled(false);
        collectionTable.setColumnSelectionAllowed(false);
        collectionTable.setDoubleBuffered(false);
        collectionTable.setEditingColumn(1);
        collectionTable.setEditingRow(1);
        collectionTable.setEnabled(true);
        collectionTable.setRowSelectionAllowed(true);
        collectionTable.setSurrendersFocusOnKeystroke(true);
        collectionTable.setToolTipText("meow meow");
        scrollPane.setViewportView(collectionTable);
        userInformationPanel = new JPanel();
        userInformationPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        userInformationPanel.setBackground(new Color(-16729671));
        userInformationPanel.setFocusable(false);
        userInformationPanel.setForeground(new Color(-1));
        collectionPanel.add(userInformationPanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        welcomeBackLabel.setBackground(new Color(-16729671));
        welcomeBackLabel.setForeground(new Color(-1));
        userInformationPanel.add(welcomeBackLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        userInformationPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        collectionLabel.setBackground(new Color(-16729671));
        collectionLabel.setFocusable(true);
        collectionLabel.setForeground(new Color(-1));
        userInformationPanel.add(collectionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, 1, null, null, null, 0, false));
        selectLanguageComboBox.setBackground(new Color(-16729671));
        selectLanguageComboBox.setEditable(false);
        selectLanguageComboBox.setForeground(new Color(-1));
        selectLanguageComboBox.setLightWeightPopupEnabled(false);
        userInformationPanel.add(selectLanguageComboBox, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rightMenuPanel = new JPanel();
        rightMenuPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rightMenuPanel.setBackground(new Color(-16729671));
        collectionPanel.add(rightMenuPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        tableSettingsPanel = new JPanel();
        tableSettingsPanel.setLayout(new GridLayoutManager(11, 1, new Insets(0, 0, 0, 0), -1, -1));
        tableSettingsPanel.setBackground(new Color(-16729671));
        rightMenuPanel.add(tableSettingsPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removeAtIndexButton = new JButton();
        removeAtIndexButton.setBackground(new Color(-1));
        removeAtIndexButton.setBorderPainted(false);
        removeAtIndexButton.setFocusable(false);
        removeAtIndexButton.setForeground(new Color(-16729671));
        removeAtIndexButton.setText("Remove at index");
        tableSettingsPanel.add(removeAtIndexButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeByIdButton = new JButton();
        removeByIdButton.setBackground(new Color(-1));
        removeByIdButton.setFocusable(false);
        removeByIdButton.setForeground(new Color(-16729671));
        removeByIdButton.setText("Remove by id");
        tableSettingsPanel.add(removeByIdButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortPanel = new JPanel();
        sortPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        sortPanel.setBackground(new Color(-16729671));
        sortPanel.setForeground(new Color(-1));
        sortPanel.setName("Sort");
        tableSettingsPanel.add(sortPanel, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        sortPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-1)), "Сортировать по", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-1)));
        sortASCButton.setBackground(new Color(-1));
        sortASCButton.setFocusable(false);
        Font sortASCButtonFont = this.$$$getFont$$$(null, -1, 20, sortASCButton.getFont());
        if (sortASCButtonFont != null) sortASCButton.setFont(sortASCButtonFont);
        sortASCButton.setForeground(new Color(-16729671));
        sortASCButton.setHideActionText(true);
        sortASCButton.setText("↓");
        sortPanel.add(sortASCButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortDESCButton.setBackground(new Color(-1));
        sortDESCButton.setFocusable(false);
        Font sortDESCButtonFont = this.$$$getFont$$$(null, -1, 20, sortDESCButton.getFont());
        if (sortDESCButtonFont != null) sortDESCButton.setFont(sortDESCButtonFont);
        sortDESCButton.setForeground(new Color(-16729671));
        sortDESCButton.setText("↑");
        sortPanel.add(sortDESCButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectSortByComboBox.setBackground(new Color(-1));
        selectSortByComboBox.setForeground(new Color(-16729671));
        sortPanel.add(selectSortByComboBox, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addButton.setBackground(new Color(-1));
        addButton.setBorderPainted(true);
        addButton.setFocusPainted(true);
        addButton.setFocusable(false);
        addButton.setForeground(new Color(-16729671));
        addButton.setHideActionText(false);
        addButton.setText("Add movie");
        tableSettingsPanel.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        clearCollectionButton.setBackground(new Color(-1));
        clearCollectionButton.setFocusable(false);
        clearCollectionButton.setForeground(new Color(-16729671));
        clearCollectionButton.setText("Clear");
        tableSettingsPanel.add(clearCollectionButton, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removeLowerButton = new JButton();
        removeLowerButton.setAutoscrolls(false);
        removeLowerButton.setBackground(new Color(-1));
        removeLowerButton.setFocusable(false);
        removeLowerButton.setForeground(new Color(-16729671));
        removeLowerButton.setText("Remove lower");
        tableSettingsPanel.add(removeLowerButton, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        oscarsCountButton = new JButton();
        oscarsCountButton.setBackground(new Color(-1));
        oscarsCountButton.setFocusable(false);
        oscarsCountButton.setForeground(new Color(-16729671));
        oscarsCountButton.setText("Count by Oscars count");
        tableSettingsPanel.add(oscarsCountButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        goldenPalmButton = new JButton();
        goldenPalmButton.setBackground(new Color(-1));
        goldenPalmButton.setFocusable(false);
        goldenPalmButton.setForeground(new Color(-16729671));
        goldenPalmButton.setText("Count by Golden palm count");
        tableSettingsPanel.add(goldenPalmButton, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        infoButton.setBackground(new Color(-1));
        infoButton.setFocusable(false);
        infoButton.setForeground(new Color(-16729671));
        infoButton.setText("Info");
        tableSettingsPanel.add(infoButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        updateMovieButton.setBackground(new Color(-1));
        updateMovieButton.setFocusable(false);
        updateMovieButton.setForeground(new Color(-16729671));
        updateMovieButton.setHideActionText(false);
        updateMovieButton.setHorizontalTextPosition(0);
        updateMovieButton.setText("Update movie");
        updateMovieButton.setToolTipText("");
        tableSettingsPanel.add(updateMovieButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteMovieButton.setBackground(new Color(-1));
        deleteMovieButton.setFocusPainted(true);
        deleteMovieButton.setFocusable(false);
        deleteMovieButton.setForeground(new Color(-16729671));
        deleteMovieButton.setInheritsPopupMenu(false);
        deleteMovieButton.setLabel("Delete movie");
        deleteMovieButton.setText("Delete movie");
        tableSettingsPanel.add(deleteMovieButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Statistics", panel2);
        canvasRatingPanel = new JPanel();
        canvasRatingPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        canvasRatingPanel.setAutoscrolls(false);
        canvasRatingPanel.setBackground(new Color(-1976857));
        canvasRatingPanel.setForeground(new Color(-4489393));
        panel2.add(canvasRatingPanel, new GridConstraints(0, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        canvasRatingPanel.setBorder(BorderFactory.createTitledBorder(null, "Рейтинг фильмов", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        movieInformationPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(movieInformationPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        movieInformationPanel.setBorder(BorderFactory.createTitledBorder(null, "Дополнительная информация", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        movieInformationLabel.setText("Label");
        movieInformationPanel.add(movieInformationLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainActivityPanel;
    }

    private void createUIComponents() {
        lang = new Lang();
        componentsInitialization();

        selectLanguageComboBox.addActionListener(e -> {
            lang.setLanguage(selectLanguageComboBox.getSelectedIndex());
            changeComponentsLanguage();
        });

        sortDESCButton.addActionListener(this::descButtonSortClicked);
        sortASCButton.addActionListener(this::ascButtonSortClicked);

        collectionTable = getCollectionTable();

        addButton = new JButton();
        addButton.addActionListener((ActionEvent e) -> new AddPopup());

        infoButton = new JButton();
        infoButton.addActionListener(this::infoButtonClicked);
    }

    private void infoButtonClicked(ActionEvent e) {
        String info = (String) new Info().execute(null, credentials.getUsername()).getData();
        info = "<html><p style=\"white-space: nowrap; font-size: 14px;\">" + info.replace("\n", "<br>") + "</p></html>";
        new InfoPopup("Информация о коллекции", info, new Color(39, 169, 169), 600, 300);
    }

    private void componentsInitialization() {
        welcomeBackLabel = new JLabel(lang.getString("hello_user") + credentials.getUsername());
        clearCollectionButton = new JButton(lang.getString("clear_collection_button"));
        sortButton = new JButton(lang.getString("sort_collection_button"));
        sortDESCButton = new JButton();
        sortASCButton = new JButton();
        selectLanguageComboBox = getLanguageIconComboBox();
        deleteMovieButton = new JButton(lang.getString("remove_collection_button"));
        updateMovieButton = new JButton(lang.getString("update_movie_button"));
        selectedMovieLabel = new JLabel(lang.getString("chosen_movie_label"));
        collectionLabel = new JLabel(lang.getString("collection_label"));
        movieInformationLabel = new JLabel();
        movieInformationPanel = new JPanel();
        selectSortByComboBox = getSortByComboBox();
        movieInformationPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-12743731)), lang.getString("movie_information_label")));
        movieInformationLabel = new JLabel("Здесь будет информация о фильме");
    }

    private void changeComponentsLanguage() {
        welcomeBackLabel.setText(lang.getString("hello_user") + credentials.getUsername());
        clearCollectionButton.setText((lang.getString("clear_collection_button")));
        sortButton.setText((lang.getString("sort_collection_button")));
        deleteMovieButton.setText((lang.getString("remove_collection_button")));
        updateMovieButton.setText((lang.getString("update_movie_button")));
        selectedMovieLabel.setText((lang.getString("chosen_movie_label")));
        collectionLabel.setText((lang.getString("collection_label")));
        selectSortByComboBox.setModel(getNewLanguageTableColumnsComboBoxModel());
        collectionTable.setColumnModel(getNewLanguageColumnModel());
        collectionTable.setDefaultRenderer(Date.class, new DateCellRenderer(lang.getCurrentLocale()));
        collectionTable.setDefaultRenderer(Integer.class, new NumberCellRenderer(lang.getCurrentLocale()));
    }

    private JTable getCollectionTable() {
        CollectionManager.readDB();
        CollectionManager collectionManager = new CollectionManager();
        collectionManager.renderMainJTable();
        Object[][] data = collectionManager.getTableContent();
        DefaultTableModel tableModel = new DefaultTableModel(data, lang.getTableColumns()) {

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (collectionManager.getCollection().isEmpty()) {
                    return Object.class;
                }
                return CollectionManager.getColumnsClasses().get(columnIndex);
            }
        };
        JTable table = new JTable(tableModel) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        table.setAutoCreateRowSorter(true);
        table.getColumnModel().getColumn(2).setCellRenderer(new DateCellRenderer(lang.getCurrentLocale()));
//        table.setDefaultRenderer(Date.class, new DateCellRenderer(lang.getCurrentLocale()));
        table.setDefaultRenderer(Integer.class, new NumberCellRenderer(lang.getCurrentLocale()));
//        TableColumn mpaartingColumn = table.getColumnModel().getColumn(6);
//        JComboBox<String> comboBox = new JComboBox<>();
//        comboBox.addItem("Snowboarding");
//        comboBox.addItem("Rowing");
//        comboBox.addItem("Chasing toddlers");
//        comboBox.addItem("Speed reading");
//        comboBox.addItem("Teaching high school");
//        comboBox.addItem("None");
//        mpaartingColumn.setCellEditor(new DefaultCellEditor(comboBox));
        scrollPane = new JScrollPane(table);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        table.setBounds(10, 20, 150, 100);
        getContentPane().add(scrollPane);
        table.setCellSelectionEnabled(true);
        ListSelectionModel select = table.getSelectionModel();
        select.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        select.addListSelectionListener(this::tableCellClicked);
        return table;
    }

    private void tableCellClicked(ListSelectionEvent e) {
        int row = collectionTable.getSelectedRow();
        StringBuilder rowData = new StringBuilder();
        for (int i = 0; i < lang.getTableColumns().length; i++) {
            rowData.append(collectionTable.getValueAt(row, i)).append(" ");
        }
        movieInformationLabel.setText(rowData.toString());
        System.out.println("Table row selected is: " + rowData);
    }

    private void descButtonSortClicked(ActionEvent e) {

        int columnIndexSortBy = selectSortByComboBox.getSelectedIndex();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(collectionTable.getModel());
        collectionTable.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
        sortKeys.add(new RowSorter.SortKey(columnIndexSortBy, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }

    private void ascButtonSortClicked(ActionEvent e) {

        int columnIndexSortBy = selectSortByComboBox.getSelectedIndex();

        TableRowSorter<TableModel> sorter = new TableRowSorter<>(collectionTable.getModel());
        collectionTable.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>(1);
        sortKeys.add(new RowSorter.SortKey(columnIndexSortBy, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }

    private JComboBox<Icon> getLanguageIconComboBox() {
        List<Icon> iconList = new ArrayList<>() {{
            add(new ImageIcon(getClass().getResource("/images/canada_flag.png")));
            add(new ImageIcon(getClass().getResource("/images/russia_flag.png")));
            add(new ImageIcon(getClass().getResource("/images/belorussia_flag.png")));
            add(new ImageIcon(getClass().getResource("/images/hungarian_flag.png")));
        }};
        DefaultComboBoxModel<Icon> comboBoxModel = new DefaultComboBoxModel<>();
        comboBoxModel.addAll(iconList);
        JComboBox<Icon> comboBox = new JComboBox<>(comboBoxModel);
        comboBox.setSelectedIndex(lang.getCurrentLocaleIndex());
        comboBox.setPreferredSize(new Dimension(50, 60));
        return comboBox;
    }

    private JComboBox<String> getSortByComboBox() {
        DefaultComboBoxModel<String> comboBoxModel = getNewLanguageTableColumnsComboBoxModel();
        JComboBox<String> comboBox = new JComboBox<>(comboBoxModel);
        comboBox.setSelectedIndex(0);
        return comboBox;
    }

    private DefaultComboBoxModel<String> getNewLanguageTableColumnsComboBoxModel() {
        return new DefaultComboBoxModel<>(lang.getTableColumns());
    }


    private DefaultTableColumnModel getNewLanguageColumnModel() {
        DefaultTableColumnModel columnModel = new DefaultTableColumnModel();
        for (int i = 0; i < lang.getTableColumns().length; i++) {
            TableColumn tableColumn = new TableColumn(i);
            tableColumn.setHeaderValue(lang.getTableColumns()[i]);
            columnModel.addColumn(tableColumn);
        }
        return columnModel;
    }
}
