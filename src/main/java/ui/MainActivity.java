package ui;

import classes.collection.CollectionManager;
import classes.movie.Movie;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import ui.locale.Lang;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends JFrame {
    private JPanel MainActivityPanel;
    private JTable collectionTable;
    private JButton clearCollectionButton;
    private JButton ascFilterTypeButton;
    private JButton descFilterTypeButton;
    private JButton sortButton;
    private JPanel canvasRatingPanel;
    private JButton deleteMovieButton;
    private JButton updateMovieButton;
    private JLabel selectedMovieLabel;
    private JLabel collectionLabel;
    private JPanel tableSettingsPanel;
    private JPanel tablePanel;
    private JPanel collectionPanel;
    private JPanel selectedMoviePanel;
    private JPanel movieInformationPanel;
    private JPanel movieActionsButtonPanel;
    private JComboBox selectLanguageComboBox;
    private JComboBox selectSortByComboBox;
    private JScrollPane scrollPane;
    private JLabel movieInformationLabel;

    public MainActivity() {
        $$$setupUI$$$();
        setContentPane(MainActivityPanel);
        setTitle("Основное меню");
        setSize(1000, 1200);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);
    }

    public static void main(String[] args) {
        MainActivity mainFrame = new MainActivity();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainActivityPanel = new JPanel();
        MainActivityPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        collectionPanel = new JPanel();
        collectionPanel.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        MainActivityPanel.add(collectionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tablePanel = new JPanel();
        tablePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        collectionPanel.add(tablePanel, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scrollPane.setEnabled(true);
        tablePanel.add(scrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, 1, null, null, null, 0, false));
        collectionTable.setAutoResizeMode(1);
        collectionTable.setCellSelectionEnabled(false);
        collectionTable.setColumnSelectionAllowed(false);
        collectionTable.setDoubleBuffered(false);
        collectionTable.setEditingColumn(1);
        collectionTable.setEditingRow(1);
        collectionTable.setEnabled(true);
        collectionTable.setRowSelectionAllowed(true);
        collectionTable.setSurrendersFocusOnKeystroke(true);
        collectionTable.setToolTipText("meow meow");
        scrollPane.setViewportView(collectionTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        collectionPanel.add(panel1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        collectionLabel.setText("");
        panel1.add(collectionLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 2, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectLanguageComboBox.setEditable(false);
        panel2.add(selectLanguageComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        selectedMoviePanel = new JPanel();
        selectedMoviePanel.setLayout(new GridLayoutManager(2, 2, new Insets(10, 5, 10, 5), -1, -1));
        MainActivityPanel.add(selectedMoviePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        selectedMovieLabel.setText("");
        selectedMoviePanel.add(selectedMovieLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        canvasRatingPanel = new JPanel();
        canvasRatingPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        canvasRatingPanel.setAutoscrolls(false);
        canvasRatingPanel.setBackground(new Color(-1976857));
        canvasRatingPanel.setForeground(new Color(-4489393));
        selectedMoviePanel.add(canvasRatingPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        canvasRatingPanel.setBorder(BorderFactory.createTitledBorder(null, "Рейтинг фильмов", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        movieInformationPanel = new JPanel();
        movieInformationPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        selectedMoviePanel.add(movieInformationPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        movieInformationPanel.setBorder(BorderFactory.createTitledBorder(null, "Дополнительная информация", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        movieActionsButtonPanel = new JPanel();
        movieActionsButtonPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        movieInformationPanel.add(movieActionsButtonPanel, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteMovieButton.setInheritsPopupMenu(false);
        deleteMovieButton.setLabel("");
        deleteMovieButton.setText("");
        movieActionsButtonPanel.add(deleteMovieButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        updateMovieButton.setText("");
        movieActionsButtonPanel.add(updateMovieButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        movieInformationLabel.setText("Label");
        movieInformationPanel.add(movieInformationLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tableSettingsPanel = new JPanel();
        tableSettingsPanel.setLayout(new GridLayoutManager(4, 3, new Insets(5, 5, 5, 5), -1, -1));
        MainActivityPanel.add(tableSettingsPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        clearCollectionButton.setText("");
        tableSettingsPanel.add(clearCollectionButton, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ascFilterTypeButton = new JButton();
        ascFilterTypeButton.setIcon(new ImageIcon(getClass().getResource("/images/down_arrow_sorting.png")));
        ascFilterTypeButton.setText("");
        tableSettingsPanel.add(ascFilterTypeButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        descFilterTypeButton = new JButton();
        descFilterTypeButton.setIcon(new ImageIcon(getClass().getResource("/images/up_arrow_sorting.png")));
        descFilterTypeButton.setText("");
        tableSettingsPanel.add(descFilterTypeButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tableSettingsPanel.add(selectSortByComboBox, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sortButton.setText("");
        tableSettingsPanel.add(sortButton, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainActivityPanel;
    }

    private void createUIComponents() {
        Lang lang = new Lang();
        clearCollectionButton = new JButton(lang.getString("clear_collection_button"));
        sortButton = new JButton(lang.getString("sort_collection_button"));
        deleteMovieButton = new JButton(lang.getString("remove_collection_button"));
        updateMovieButton = new JButton(lang.getString("update_movie_button"));
        selectedMovieLabel = new JLabel(lang.getString("chosen_movie_label"));
        collectionLabel = new JLabel(lang.getString("collection_label"));

        List<Icon> iconList = new ArrayList<>() {{
            add(new ImageIcon("images/russia_flag.png"));
            add(new ImageIcon("images/belorussia_flag.png"));
            add(new ImageIcon("images/canada_flag.png"));

        }};
        DefaultComboBoxModel<Icon> defaultComboBoxModel = new DefaultComboBoxModel<>();
        defaultComboBoxModel.addAll(iconList);

        selectLanguageComboBox = new JComboBox<>(Lang.getAvailableLanguagesList());
//        selectLanguageComboBox = new JComboBox<>(defaultComboBoxModel);
        selectLanguageComboBox.setPreferredSize(new Dimension(50, 60));



        selectSortByComboBox = new JComboBox<>(Movie.getSQLColumn());
        selectSortByComboBox.setSelectedIndex(1);

        movieInformationLabel = new JLabel("Здесь будет информация о фильме");

        CollectionManager.readDB();
        CollectionManager collectionManager = new CollectionManager();
        List<Movie> movies = collectionManager.getCollection();
        String[][] arr = new String[movies.size()][10];
        for (int i = 0; i < movies.size(); i++) {
            arr[i] = movies.get(i).toSQLRepresentation();
        }

        String[] column = {"имя", "координаты", "дата создания", "количество оскаров", "количество золотых пальм", "бюджет", "возрастной рейтинг", "создатель"};
        collectionTable = new JTable(arr, column) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        scrollPane = new JScrollPane(collectionTable);
        scrollPane.setHorizontalScrollBarPolicy(
                JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        collectionTable.setBounds(10, 20, 150, 100);
        getContentPane().add(scrollPane);
        collectionTable.setCellSelectionEnabled(true);
        ListSelectionModel select = collectionTable.getSelectionModel();
        select.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        select.addListSelectionListener(e -> {
            int row = collectionTable.getSelectedRow();
            StringBuilder data = new StringBuilder();
            for (int i = 0; i < column.length; i++) {
                data.append(collectionTable.getValueAt(row, i)).append(" ");

            }
            System.out.println("Table row selected is: " + data);
        });
    }
}
